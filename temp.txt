當你在React應用中測試API時，使用Mock Service Worker (MSW)可以測試你的應用程式是否正確處理API回應。以下是一個使用MSW測試https://swapi.dev/api/的範例程式碼：

首先，您需要安裝MSW。您可以在終端機中使用以下命令進行安裝：

```
npm install msw --save-dev
```

接下來，您可以在測試檔案中使用以下程式碼：

```javascript
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { render, screen, waitFor } from '@testing-library/react';
import App from './App';

// 創建一個mock server
const server = setupServer(
  // 定義要攔截的請求和處理程序
  rest.get('https://swapi.dev/api/people/', (req, res, ctx) => {
    // 返回模擬的人物資料
    return res(
      ctx.status(200),
      ctx.json({
        results: [
          { name: 'Luke Skywalker', height: '172', mass: '77' },
          { name: 'Darth Vader', height: '202', mass: '136' },
        ],
      }),
    );
  }),
);

// 在所有測試開始之前啟動mock server
beforeAll(() => server.listen());

// 在每個測試之後關閉mock server
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

// 測試應用程式是否正確顯示人物資料
test('displays Star Wars characters', async () => {
  // 渲染應用程式
  render(<App />);

  // 確認載入中狀態已經出現
  expect(screen.getByText('Loading...')).toBeInTheDocument();

  // 等待人物資料載入
  await waitFor(() => {
    expect(screen.getByText('Luke Skywalker')).toBeInTheDocument();
    expect(screen.getByText('Darth Vader')).toBeInTheDocument();
  });
});
```

在這個範例中，我們創建了一個mock server，並使用`rest.get`定義了攔截的請求和處理程序。當API接收到`https://swapi.dev/api/people/`路徑的GET請求時，它將返回模擬的人物資料。

在測試中，我們使用`render`函數渲染應用程式，並確認載入中狀態已經出現。然後，我們使用`waitFor`等待人物資料載入，並使用`expect`斷言確認人物資料是否正確顯示。

這只是使用MSW測試https://swapi.dev/api/的一個簡單範例。您可以使用類似的方法定義攔截的請求和處理程序，以測試您的應用程式的不同方面。